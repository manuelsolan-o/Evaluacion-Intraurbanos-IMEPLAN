---
title: "Documentacion"
format: 
  html: 
    theme: zephyr
    self-contained: true
    code-fold: false
    code-tools: true
    code-line-numbers: true
editor: visual
author: "Manuel Solano"
date: "November 11, 2024"
toc: true
eval: false
---

# Documentación: Evaluación de Suficiencia de equipamientos Intraurbanos IMEPLAN

Está es una interfaz gráfica que integra la metodología para la evaluación de equipamientos intraurbanos descrita en el siguiente [documento](https://drive.google.com/file/d/1gfkAmNN9izNh-S8yhzfxdQ8NY_Yl-WYM/view).

## Calcular oferta y demanda

![](media/kernel_density.png){width="600"}

Se utlizá el algoritmo *Kernel Density* de QGIS para calcular tanto la oferta como la demanda. Lo único que difere en cada caso es el archivo que ingresa como input. Los equipamientos para el caso de la oferta y las manzanas para la demanda.

### Oferta

```{r}
calcular_oferta <- function(
    equip_layer_path,
    nombre_equipamiento,
    radio,
    pesos_equipamientos
) {
  # Definir la ruta de salida
  output_path <- file.path(nombre_equipamiento, paste0("kernel_", nombre_equipamiento, ".tif"))
  
  limite_metropolitano_path <- "C:/Users/manue/IMEPLAN/Intraurbanos_Suficiencia/datos/Limite_metropolitano/Limite_metropolitano.shp"
  
  # Asegurarse de que el directorio de salida exista
  if (!dir.exists(nombre_equipamiento)) {
    dir.create(nombre_equipamiento, recursive = TRUE)
  }
  
  # Cargar y transformar la capa de entrada
  input_layer <- st_read(equip_layer_path, quiet = TRUE)
  input_layer <- st_transform(input_layer, crs = 32613)
  
  # Definir los parámetros para el algoritmo de QGIS
  params <- list(
    INPUT = input_layer,
    RADIUS = radio,
    RADIUS_FIELD = NULL,
    PIXEL_SIZE = 20,
    WEIGHT_FIELD = pesos_equipamientos,
    KERNEL = 0,           # Kernel Quartic (o 0 como valor predeterminado)
    DECAY = 0,
    OUTPUT_VALUE = 0,     # Cambiar a Density si es necesario
    OUTPUT = output_path  # Ruta de salida explícita
  )
  
  # Ejecutar el algoritmo de QGIS con manejo de errores
  tipo_geometria <- st_geometry_type(input_layer)[1]  # Toma el primer tipo de geometría
  
  # Usar if...else para asignar el ID del algoritmo según el tipo de geometría
  if (grepl("POINT", tipo_geometria)) {
    alg_id <- "qgis:heatmapkerneldensityestimation"
  } else if (grepl("LINE", tipo_geometria)) {
    alg_id <- "native:linedensity"
  } else {
    stop("Tipo de geometría no soportado. Solo se admiten geometrías de 'Point' o 'Line'.")
  }
  
  result <- tryCatch({
    do.call(qgis_run_algorithm, c(list(algorithm = alg_id), params))
  }, error = function(e) {
    message("Ocurrió un error:")
    message(e$message)
    NULL
  })
  
  # Verificar si el resultado es válido
  if (is.null(result)) {
    message("La ejecución del algoritmo falló.")
    return(NULL)
  }
  
  # Cargar el raster resultante y el shapefile de límite
  raster <- rast(output_path)
  shapefile <- st_read(limite_metropolitano_path, quiet = TRUE)
  
  # Asegurarse de que ambos tengan el mismo sistema de coordenadas
  shapefile <- st_transform(shapefile, crs(raster))
  
  # Obtener la extensión (bounding box) y extender el raster
  bbox <- ext(shapefile)
  extended_raster <- extend(raster, bbox)
  
  # Establecer el valor de NoData a -9999 y reemplazar con 0
  NAflag(extended_raster) <- -9999
  extended_raster[extended_raster == -9999] <- 0
  extended_raster[is.na(extended_raster)] <- 0
  
  # Guardar el raster resultante
  output_extended_path <- file.path(nombre_equipamiento, paste0("kernel_", nombre_equipamiento, "_limite_amg.tif"))
  writeRaster(extended_raster, output_extended_path, overwrite = TRUE)
  
  message("El procesamiento y guardado del raster se completaron con éxito.")
  
  return(output_extended_path)
}
```

### Demanda

```{r}
calcular_demanda <- function(
    manzanas_layer_path,
    nombre_equipamiento,
    radio,
    pesos_manzanas
) {
  # Definir la ruta de salida
  output_path <- file.path(nombre_equipamiento, paste0("kernel_","manzanas_", nombre_equipamiento, ".tif"))
  
  limite_metropolitano_path <- "C:/Users/manue/IMEPLAN/Intraurbanos_Suficiencia/datos/Limite_metropolitano/Limite_metropolitano.shp"
  
  # Asegurarse de que el directorio de salida exista
  if (!dir.exists(nombre_equipamiento)) {
    dir.create(nombre_equipamiento, recursive = TRUE)
  }
  
  # Cargar y transformar la capa de entrada
  input_layer <- st_read(manzanas_layer_path, quiet = TRUE)
  input_layer <- st_transform(input_layer, crs = 32613)
  
  # Definir los parámetros para el algoritmo de QGIS
  params <- list(
    INPUT = input_layer,
    RADIUS = radio,
    RADIUS_FIELD = NULL,
    PIXEL_SIZE = 20,
    WEIGHT_FIELD = pesos_manzanas,
    KERNEL = 0,           # Kernel Quartic (o 0 como valor predeterminado)
    DECAY = 0,
    OUTPUT_VALUE = 0,     # Cambiar a Density si es necesario
    OUTPUT = output_path  # Ruta de salida explícita
  )
  
  # Ejecutar el algoritmo de QGIS con manejo de errores
  alg_id <- "qgis:heatmapkerneldensityestimation"
  result <- tryCatch({
    do.call(qgis_run_algorithm, c(list(algorithm = alg_id), params))
  }, error = function(e) {
    message("Ocurrió un error:")
    message(e$message)
    NULL
  })
  
  # Verificar si el resultado es válido
  if (is.null(result)) {
    message("La ejecución del algoritmo falló.")
    return(NULL)
  }
  
  # Cargar el raster resultante y el shapefile de límite
  raster <- rast(output_path)
  shapefile <- st_read(limite_metropolitano_path, quiet = TRUE)
  
  # Asegurarse de que ambos tengan el mismo sistema de coordenadas
  shapefile <- st_transform(shapefile, crs(raster))
  
  # Obtener la extensión (bounding box) y extender el raster
  bbox <- ext(shapefile)
  extended_raster <- extend(raster, bbox)
  
  # Establecer el valor de NoData a -9999 y reemplazar con 0
  NAflag(extended_raster) <- -9999
  extended_raster[extended_raster == -9999] <- 0
  extended_raster[is.na(extended_raster)] <- 0
  
  # Guardar el raster resultante
  output_extended_path <- file.path(nombre_equipamiento, paste0("kernel_","manzanas_", nombre_equipamiento, "_limite_amg.tif"))
  writeRaster(extended_raster, output_extended_path, overwrite = TRUE)
  
  message("El procesamiento y guardado del raster se completaron con éxito.")
  
  return(output_extended_path)
}
```

Se hace un procesamiento extra después de correr el algoritmo. En función de obtener el tamaño correcto de los rasters resultantes se hace una extención teniendo como marco de referencia un archivo que contiene el límite metropolitano definido por el IMEPLAN.

```{r}
# Cargar el raster resultante y el shapefile de límite
  raster <- rast(output_path)
  shapefile <- st_read(limite_metropolitano_path, quiet = TRUE)
  
  # Asegurarse de que ambos tengan el mismo sistema de coordenadas
  shapefile <- st_transform(shapefile, crs(raster))
  
  # Obtener la extensión (bounding box) y extender el raster
  bbox <- ext(shapefile)
  extended_raster <- extend(raster, bbox)
  
  # Establecer el valor de NoData a -9999 y reemplazar con 0
  NAflag(extended_raster) <- -9999
  extended_raster[extended_raster == -9999] <- 0
  extended_raster[is.na(extended_raster)] <- 0
  
  # Guardar el raster resultante
  output_extended_path <- file.path(nombre_equipamiento, paste0("kernel_","manzanas_", nombre_equipamiento, "_limite_amg.tif"))
  writeRaster(extended_raster, output_extended_path, overwrite = TRUE)
  
  message("El procesamiento y guardado del raster se completaron con éxito.")
  
  return(output_extended_path)
```

## Índice y Normalización de insumos de Oferta y Demanda

Para calcular el índice de oferta y demanda se utiliza una misma fórmula pero solo hay un cambio en el valor que multiplica al exponente de la constante de exponenciación y este cambia para cada tipo de equipamiento.

## Fórmulas para subsistema de educación

### Preescolar
$$
Indice = Aula_{oferta} - Aula_{demanda}
$$
$$
Indice_{norm} = \frac{2}{1 + e^{-0.4 \times Indice}} - 1
$$

### Primaria
$$
Indice_{Primaria} = Aula_{oferta} - Aula_{demanda}
$$
$$
Indice_{norm} = \frac{2}{1 + e^{-0.2 \times Indice_{Primaria}}} - 1
$$

### Educación especial
$$
Indice = Aula_{oferta} - Aula_{demanda}
$$
$$
Indice_{norm} = \frac{2}{1 + e^{-2.5 \times Indice}} - 1
$$

### Secundaria
$$
Indice_{Secundaria} = Aula_{oferta} - Aula_{demanda}
$$
$$
Indice_{norm} = \frac{2}{1 + e^{-0.5 \times Indice_{Secundaria}}} - 1
$$

### Preparatoria
$$
Indice_{Prepa\_v2} = Prepa_{oferta} - Prepa_{demanda}
$$
$$
Indice_{PrepaNorm\_v2} = \frac{2}{1 + e^{-2.5 \times Indice_{Prepa\_v2}}} - 1
$$

## Fórmulas para subsistema de abasto de alimentos

### Tianguis
$$
Indice_{Tiangui} = Tiangui_{oferta} - Tiangui_{demanda}
$$
$$
Indice_{norm\_tiangui} = \frac{2}{1 + e^{-0.035 \times Indice_{Tiangui}}} - 1
$$

### Mercados
$$
Indice_{Mercado} = Mercado_{oferta} - Mercado_{demanda}
$$
$$
Indice_{norm\_Mercado} = \frac{2}{1 + e^{-0.06 \times Indice_{Mercado}}} - 1
$$

## Fórmulas para subsistema de salud

### Subsistema de salud - Grupo 1
$$
Indice = Grupo1_{oferta} - Grupo1_{demanda}
$$
$$
Indice_{norm} = \frac{2}{1 + e^{-3.5 \times Indice}} - 1
$$

### Subsistema de salud - Grupo 2
$$
Indice = Salud_{oferta} - Salud_{demanda}
$$
$$
Indice_{norm} = \frac{2}{1 + e^{-5 \times Indice}} - 1
$$

### Subsistema de salud - Grupo 3
$$
Indice = Grupo3_{oferta} - Grupo3_{demanda}
$$
$$
Indice_{norm} = \frac{2}{1 + e^{-2.5 \times Indice}} - 1
$$

Es por eso que se realizó esta automatización a este proceso:

```{r}
indice_norm <- function(
    nombre_equipamiento,
    constante_norm
) {
  # Cargar los rasters
  primarias <- rast(paste0(nombre_equipamiento,"/kernel_",nombre_equipamiento,"_limite_amg.tif"))
  manzanas <- rast(paste0(nombre_equipamiento,"/kernel_manzanas_", nombre_equipamiento,"_limite_amg.tif"))
  
  # Definir un raster base (primarias) como referencia para el alineamiento
  manzanas_aligned <- resample(manzanas, primarias, method = "bilinear")
  
  # Realizar la resta
  resultado <- primarias - manzanas_aligned
  
  writeRaster(resultado, paste0(nombre_equipamiento,"/resultado_resta.tif"), overwrite = TRUE)
  
  # Aplicar la normalización al raster
  indice_norm <- (2 / (1 + exp(constante_norm * resultado))) - 1
  
  # Guardar el raster normalizado
  writeRaster(indice_norm, paste0(nombre_equipamiento,"/resultado_normalizado.tif"), overwrite = TRUE)
}
```

## Resultados

Finalmente, se crea una clasificación dependiendo del índice que obtuvo cada manzana y esta se guarda en un nuevo archivo (shp de puntos).\
\
Para pasar los resultados a un shp de polígonos de manzanas, véase el archivo **Results.qmd**

```{r}
results <- function(
    nombre_equipamiento,
    manzanas_layer_path
) {
  
  raster_normalizado <- rast(paste0(nombre_equipamiento,"/resultado_normalizado.tif"))
  
  input_layer <- st_read(manzanas_layer_path, quiet = TRUE)
  manzanas <- st_transform(input_layer, crs = 32613)
  
  # Asegurarse de que ambos tienen el mismo CRS
  # Cambiar el CRS de manzanas para que coincida con el del raster si es necesario
  if (!st_crs(manzanas) == crs(raster_normalizado)) {
    manzanas <- st_transform(manzanas, crs(raster_normalizado))
  }
  
  # Convertir el shapefile a puntos (puedes usar centroides o los puntos del contorno)
  manzanas_centroid <- st_centroid(manzanas)
  
  # Extraer los valores del raster en las ubicaciones de los puntos
  valores_extraidos <- terra::extract(raster_normalizado, vect(manzanas_centroid))
  
  # Asegurarse de que los valores extraídos se asignan correctamente
  # `valores_extraidos` es un data.frame con la estructura: ID del punto y valor del raster
  
  # Combinar los valores extraídos con el shapefile original
  manzanas$valor_intersectado <- valores_extraidos[, 2]
  
  # Crear la columna de categorías según los rangos proporcionados
  manzanas <- manzanas %>%
    mutate(categoria = case_when(
      valor_intersectado >= -1 & valor_intersectado < -0.60 ~ "Proximidad media con alto déficit de equipamiento",
      valor_intersectado >= -0.60 & valor_intersectado < -0.20 ~ "Proximidad alta con déficit de equipamiento",
      valor_intersectado >= -0.20 & valor_intersectado <= 0.20 ~ "Proximidad alta con balance de equipamiento",
      valor_intersectado > 0.20 & valor_intersectado <= 0.60 ~ "Proximidad alta con superávit de equipamientos",
      valor_intersectado > 0.60 & valor_intersectado <= 1 ~ "Proximidad muy alta con alto superávit de equipamiento",
      TRUE ~ "Sin categoría"
    ))
  
  manzanas <- manzanas %>%
    mutate(CV_Categoria = case_when(
      valor_intersectado >= -1 & valor_intersectado < -0.60 ~ 1,
      valor_intersectado >= -0.60 & valor_intersectado < -0.20 ~ 2,
      valor_intersectado >= -0.20 & valor_intersectado <= 0.20 ~ 3,
      valor_intersectado > 0.20 & valor_intersectado <= 0.60 ~ 4,
      valor_intersectado > 0.60 & valor_intersectado <= 1 ~ 5,
      TRUE ~ NA_real_  # Usamos NA_real_ para representar valores faltantes como numéricos
    ))
  
  
  # Guardar el shapefile resultante con la nueva columna
  st_write(manzanas, paste0(nombre_equipamiento,"/manzanas_resultados.shp"), delete_layer = TRUE)
}
```
